QUESTIONS:
.py is python file
def function_name(parameter1, parameter2) / (defining a function)
var = {} defines a dictionary
var = [] defines up a list
var = () defines up a tuple
my_num = 1 / establishes an int
my_num = float(1.5) / establishes a float, any number that is and is not an int
division always default returns float
int(..) / returns argument as an integer
str(..) / returns argument as a string
type(..) / returns arg as what type it is (list, int, float etc.)
print(..) / prints arg 
you cannot define within a print statement
var // var / Floor Division returns division in the number that both number types are (ie. int // int returns an int.
	11 // 2 returns 5 because both nums are int and it rounds down.)
% / modulo returns left over value (5 % 2 equals 1 )
** / uses exponential (ie. 10 ** 2 equals 100 )
shorthand equal can be used on modulo, division, exponential, plus, etc.
a string can be wrapped in single or double quotes ' or " 
print('..' , end='..') / adds end value attached to the end of the print.
end='' / print is default to new line, so by adding end='' changes so that the end is empty, no new line
String Concatenation / adding strings together via + or +=
input(..) / is a prompt for user to add input. inside (..) will print so that user can know what is desired input. input default always is a string even if only numbers go in. 
methods are always .method()
.format(..) / is a method that formats a form of output (ie. str_var = '{} you are {} and you're beautiful'.format(instructor, user_age)
{} / is a placeholder for .format .
str_var = '%s you are %d and you are beautiful' % (instructor , user_age) / is old method (PYTHON 2) for format


'and' & 'or' are conditionals that can be applied to if statements
if statement conditionals can be chained ie. if 6 < 10 > 8
dict3 = dict1 will make it so that both point to the same value of the variable and by changing one, the other too is changed
is, in, not in / are all conditionals that return a Boolean. They do not need an if statement to be used.
.lower() will turn variable to lowercase
.upper() will turn variable to uppercase
conditionals can be case-sensitive
you can have multiple 'elif's but only one 'else'.
ord(..) gets int ASCII value of char. 
chr(..) gets ASCII char value with int.
non-inclusive means it stops before the number designated / ie. put in 10, goes to 9
range(..) / gives a range of numbers. default starts counting at 0. 
range(start, stop, step) / var in start is the beginning num it starts counting from / var in stop is number it will stop at/ step is by how much the number will count by. ie. range(0, 10, 3) == 0, 3, 6, 9
continue, break, pass / must be used within a loop.
continue / continues the code, moving on to the next iteration of the loop.
break / breaks out of loop and ends it.
pass / continues on the same iteration of the loop.
print(f'..{}') / prints specific outputs
while / will loop until conditional is met
len(..) / will give you length of string var
help(..) / gives additional info to function var
isinstance(..) / chacks if value matches type, returns boolean. ie. isinstance('sean', str) returns True
abs(..) / returns absolute value of number



